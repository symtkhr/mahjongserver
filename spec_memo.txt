<11/23>
公開テスト

じゃあ来週までに下記チケットを。
・役なし自摸後の詰みバグ
・「聴牌」ふきだし表示
・操作時の音出し
・鳴きラグの捨牌に矢印とか点滅とか入れる。
・鷲巣雀の黒牌表現
・自摸牌をあらかじめ選択しておく
・立直中の自動自摸切り
・自摸切りbot

<11/16>
[ルール]
<鳴き>
*喰い替え 可
海底牌は鳴けない、槓できない
*ポンチー直後の槓 可
槓ドラ: 暗槓で即めくり, 明槓で打牌後めくりまたは嶺上開花後めくり

<和了>
後付け あり
二家和・三家和: 頭跳ねオンリー
*役なし和了・振聴ロンはその場で和了放棄通知 (ボタンを誤って押さないように注意)
暗槓の搶槓ロン 常になし

<宣言>
*不聴立直はその場で和了放棄通知 (チェックを誤って押さないように注意)
借金立直 あり
*立直後暗槓: 不可
*途中流局 (四風連打・九種九牌・三家和・四人立直・四槓算了) すべてなし
*槓は何回発生しても続行。5回め以降の槓は嶺上牌を海底から引き, 槓ドラを増やさない。

<局遷移>
東南戦 西入なし
*0点開始 50点返し -250点未満で箱割れ
不聴親流れ, 和了やめ聴牌やめ あり

<役>

<他>
王牌は14枚残し
赤ドラなし
包なし
2翻しばり なし
流し満貫: あり。和了扱いではない()。複数者成立は個別計算。


<11/14>
役なし和了の対応
蔵: DECLF宣言時に 嶺上/天和系 以外の役を計算 → 役なしならDECLF0_0を送付
鯖: DECLF0_0 が来たら, 状況役ちぇっく → 該当なしなら和了放棄
//ただし現状では牌底のみ(蔵側で解決)・搶槓のみが和了できないと思われ

<11/9>
テストケース後付けしてみる

なぜかドラが増えた?
type:haifu/haifu:3DEAL_00000000000000000000000000;0DEAL_03070c143648545c5e60616671;1DEAL_00000000000000000000000000;2DEAL_00000000000000000000000000;xDORA_2b;0DRAW_62;0DISC_71;1DRAW_00;1DISC_76;2DRAW_00;2DISC_7a;3DRAW_00;3DISC_42;0DRAW_28;0DISC_28;1DRAW_00;1DISC_6a;2DRAW_00;2DISC_83;3DRAW_00;3DISC_70;0DRAW_72;0DISC_72;1DRAW_00;1DISC_06;2DRAW_00;2DISC_74;3DRAW_00;3DISC_05;3DRAW_00;3DISC_87;xDORA_2c;0DRAW_68;0DISC_48;1DRAW_00;1DISC_45;2DRAW_00;2DISC_82;3DRAW_00;3DISC_21;0DRAW_65;0DISC_14;1DRAW_00;1DISC_22;2DRAW_00;2DISC_7c;3DRAW_00;3DISC_19;0DRAW_7b;0DISC_7b;1DRAW_00;1DISC_10;2DRAW_00;2DISC_4b;3DRAW_00;3DISC_64;0DRAW_25;0DISC_25;1DRAW_00;1DISC_4a;2DRAW_00;2DISC_79;3DRAW_00;3DISC_01;0DRAW_0a;0DISC_0a;1DRAW_00;1DISC_47;2DRAW_00;2DISC_0b;3DRAW_00;3DISC_40;0DRAW_52;0DISCR_36;1DRAW_00;1DISC_1e;2DRAW_00;2DISC_2a;3DRAW_00;3DISC_2f;0DRAW_04;0DISC_04;1DRAW_00;1DISC_86;2DRAW_00;2DISC_23;3DRAW_00;3DISC_7f;0DRAW_6e;0DISC_6e;1DRAW_00;1DISC_7d;2DRAW_00;2DISC_46;3DRAW_00;3DISC_27;0DRAW_24;0DISC_24;1DRAW_00;1DISCR_32;2DRAW_00;2DISC_49;3DRAW_00;3DISC_33;0DRAW_85;0DISC_85;1DRAW_00;1DISC_6f;2DRAW_00;2DISC_37;3DRAW_00;3DISC_2e;1DECLF_0;1DORA_4d1f;1HAND_13181c31353d3f4143444e5355;END/


<11/7>
表示制御設計が弱い。

●ログイン
蔵a→:   {q:login, name:####}
●開戦
→蔵a-d: {type:table,  q:renew, aspect:xx, honba:xx, banked:xx }
→蔵a-d: {type:player, q:renew, wind:xx, name:###, pt:xx, operable:t/f, id:xx}
●配牌
→蔵a:   {type:haifu,  haifu:"aDEAL_xxxxx;...;aDRAW_xx" }
●打牌+自摸
蔵a→:    {q:haifu, haifu:bDISC_xx}
→蔵a-d:  {type:haifu, haifu:"aDISC_xx;bDRAW_xx"}
→蔵b:    {type:layout, op:DISC;DECLF;DECLK, time:xx}
→蔵a,c,d:{type:layout, op:null}
●打牌+ラグ
蔵b→:   {q:haifu, haifu:bDISC_xx}
→蔵d:   {type:layout, op:DECLC;DECLP, time:xx}
→蔵a-c: {type:layout, op:null}
●切断
→蔵a-d: {type:player, q:update, wind:xx, is_connected:t/f}
●和了放棄
→蔵a-d: {type:player, q:update, wind:xx, is_houki:t/f}
●和了
蔵c→:   {q:haifu, haifu:"cDECLF_0"}
→蔵c:   {type:haifu, haifu:"cDECLF_0;cHAND:xxxxxxx", id:xx}
→蔵c:   {type:player, q:calc, wind:xx, 
	 is_reach, is_1patsu, is_kaihua, is_tenho, changkong:xx}
→蔵c:   {type:table, q:update, wind:xx, is_end:true}
蔵c→:   {q:calc, wind:xx, p:[x,x,x]}
→蔵a-d: {type:layout, op:payment, next:xx, point:[x,x,x,x...]}
●役なし和了
蔵c→:   {q:haifu, haifu:"cDECLF0_0"}
→蔵c:   {type:haifu, haifu:"cDECLF0_0;cHAND_xxxxxxx;dDRAW_00", id:xx}
→蔵a-d: {type:player, q:update, wind:c, is_houki:t/f}
●振聴栄
蔵c→:   {q:haifu, haifu:"cDECLF0_0"}
→蔵c:   {type:haifu, haifu:"cDECLF0_0;cHAND_xxxxxxx;dDRAW_00", id:xx}
→蔵a-d: {type:player, q:update, wind:c, is_houki:t/f}
●不聴立直
蔵c→:   {q:haifu, haifu:"cDISCR_xx"}
→蔵c:   {type:haifu, haifu:"cDISCR0_0;cHAND_xxxxxxx;dDRAW_00", id:xx}
→蔵a-d: {type:player, q:update, wind:c, is_houki:t/f}
●荒牌流局
蔵c→:   {q:haifu, haifu:"cDISC_xx"}
→蔵c:   {type:haifu, haifu:"cDISC_xx;cHAND:xxxxxxx", id:xx}
→蔵c:   {type:player, q:update, is_reach, is_tempai} // 不要かも
→蔵c:   {type:table, q:update, wind:xx, is_end:true}
→蔵a-d: {type:layout, op:payment, next:xx, point:[x,x,x,x...]}
●流し満貫
●終局
蔵c→:   {q:haifu, haifu:"cDECLF_0"}
→蔵c:   {type:haifu, haifu:"cDECLF_0;cHAND:xxxxxxx", id:xx}
→蔵a-d: {type:player, q:calc, wind:xx, 
	 is_reach, is_1patsu, is_kaihua, is_tenho, changkong:xx}
→蔵a-d:   {type:table, q:update, wind:xx, is_end:true}
蔵c→:   {q:calc, wind:xx, p:[x,x,x]}
→蔵a-d: {type:layout, op:payment, next:end, point:[x,x,x,x...]}

データ構造が決まればロジックは自ずと決まる

<11/6>
テスト環境がほしい。。

<11/4-5>
*cli:立直宣言牌を鳴かれるときつい#
*cli:流局時にリロードをすると詰む#
*srv:ロン和了/嶺上自摸のばあいも最終自摸牌が最後につく#
*cli:かんで待ちが変わると嶺上開花できない#
*srv:槓フラグでボタンが表示されない#
*srv:搶槓制御->二家和のときにスルーが後発だと両者とも上がれない#
*srv:搶槓制御->和了後のカウントダウンが止まらない#

<10/30>
クライアント側再設計
JSONでオブジェクトもらう?
投げるデータ: {class:"player"/"table", q:"関数名", arg:値}

<10/21-25>
タイマ実装完了

●未遂チケット(11/23リリースまでに終わらせたいもの):
*srv/cli:メンバの値を自由に変えられるインタフェイス

*srv:切断時動作をもう少し詰める
*srv:自摸和了
*cli:自摸切り牌->cli:DISCT/DISCTR/DISCTR0/DISCR0の対応
*cli:dump_stat()表示の見直し全般
  -> call:牌譜を1つ遡ったときの動作が他家ならそれも表示
  -> 例:A打(立直)→B摸/A打→B吃/A槓→D栄/A誤栄→C摸
  -> 例外:A槓→A摸 は 両方表示?
   *cli:振り込み者の色付け
   *cli:流局時聴牌を見やすくする。色付けとか。

*srv:ログイン制御# -> 卓の数 * 4 をログインユーザ数が超えた場合の処理
*srv/cli:切断処理# -> 摸牌した後に落ちた場合の処理(timeoutで処理?)
-> 全卓の check_timeout()を1秒置きにたたく? -> 何か怪しい
-> disconnectイベント時に強制進行させてしまうとか。

*cli:立直チェック時の色付け
*srv:不正なタイミングで"DECL0"を発行すると少牌扱いされて止まる

*cli:自槓ボタン押せず->選択してから押せばよい(わかりにく...)
*cli:カウントダウンどうする?
*cli:ログイン後のwaiting表示/approval表示*
*cli:切断表示*, onerror, ondisconnect
*cli:搶槓のみでの和了->point = undefined で返るため、まあ動作に問題ないが要注意。

*srv:立直中の暗槓の禁止 *
*cli:立直棒と和了放棄の表示#
*cli:左右ボタンがばぐっている#
*cli:他人のターンで他人の牌が#、鳴きラグで自分の手牌が選択できちゃう#
*cli:選択:鳴きなし#,ロンなし#
*cli:鳴いた次局で立直ボタンが出ない#、立直かけた次の局で立直チェックされてる#

*srv/cli:流し満貫表示 #
*cli:OKボタンでかくする#
*cli:宣言を見やすくする。局遷移後に宣言が見えなくなるバグの修正。#
*cli:左右プレイヤの名前の重なり #
*cli:右プレイヤの捨牌が上詰めになるもんだい#、捨て牌が18枚しか#
*srv/cli:終了制御：和了やめ*, 箱割れ*, 南4終了*, その後のインタフェイス#

●未遂チケット(優先度低)
*cli:自摸切り,自動和了
*srv:立直中の暗かん → できてた?
*srv:ぽんちー直後のかん
*srv:途中流局: 四開かん > 四家立直 > 九種九牌 > 四風連打 → 終了後は無勝負やり直し
*srv:ルール選択: 喰い替え,赤・花・透明#, 2翻縛
*srv:借金立直

●以下、済み(ただしテストコードが要る)：
*srv:要確認>配牌聴牌で栄和可能か?#
*srv:うらどら・かんどら＃
*srv:自摸和のとき理牌しない＃
*srv:終巡制御＃(#立直できない, #聴牌料授受, #加暗かんできない, #鳴けないただしロンは可)
*srv:親和了後に局遷移しない場合がある＃
*srv:局遷移てすと：
	#1子栄和→東2-0へ/#2子自摸和→東2-0へ
	#3親栄和→東1-1へ/#4親自摸和→東1-1へ
	5不聴流局→東2-0へ/6聴牌流局→東2-0へ
*srv:流れ供託・通らば立直で振り込んだときの供託#
*srv/cli:振聴#
*srv:終局制御(切れない,宣言できない)*
*srv/cli:ラグ中のUI表示#, 自摸和後のUI#
*cli:画面表示・ソケット送付モジュールの要整理#
*cli:聴牌から一向聴に戻したときに表示が解消されない→聴牌表示の削除#
*cli:立直中に自摸牌以外をクリック不可に#
*cli:天和・地和・人和(*)#
*srv/cli:錯和の和了放棄# (役なし栄・振聴栄*・不聴立直*) → 鳴きフラグなどのスルー*
*srv:二家和制御/頭跳ね → 頭跳ね縛り
*srv:W立直 #

<10/14>
点数計算実装完了

<10/12>
クライアントの画面設計再構成
点数計算時の動作詳細
[和了の場合]
cli {h:"DECLF"}
srv {haifu:"xDECLF;xHAND_xxxxxx;DORA:xxxx;END"} // 単ロン時
srv {haifu:"xDECLF;xHAND_xxxxxx;haifu:"xDECLF;xHAND_xxxxxx;DORA:xxxx;END"}//Wロン時
cli_jq:和了形とどらを画面表示
cli {q:"calc",p:"xx_xx_xx"} 
// ENDがきたら自動で返す(jsで手役のみ計算。暫定措置)
srv {type:"approval",point: [p0_hand,p0_hon,p0_com,p1_hand..., p3_com], next:3_1 }
// 計算結果に本場と供託を加味する。Wロンの場合は別途考慮。
cli_jq 点計算・授受・次局を画面表示
cli {sb:"approval",ans:true}

[流局の場合のソケット部]
cli {h:"DISC_xx"}
srv {haifu:"xDISC_xx;xHAND_xxxxx;END"}
srv {type:"approval",point: [p0_hand,p0_hon(=0),p0_com,p1_hand..., p3_com], next:3_1 }
cli {sb:"approval",ans:true}

鯖からもらえる情報が少ないような気がしないでもない。

<10/3>
下記デバッグ完了。
ツモったときにq=Calcで全員マイナスされる。

<9/30>
テストパターンは東1局でのみ成功するものだったため、各局でやり直し。

<9/21>
サーバの局遷移実装完了。
クライアント側をテストする上でほしいもの。
サーバ可動途中でdebug_mode_s()に入れたり抜けたりできるやつ。

<9/11>
実装開始。

<9/10>
データ構造検討完了。
島版jspaceを参照しながら2時間程度悩む。

<9/8>
要整理: 以下の使分けと相互変換
$this->jpの配列index, 
$this->jp->wind, 
$this->turn 

<9/5>
srv_sockrecv_handler():
全体動作
case PHASE_INIT:
cli {sb: "init", }

case PHASE_GAME:
srv {wind:x, name:"xxxx", point:<int>, is_yourself:<bool>}
srv {haifu:"xDEAL_xxxx", }
cli {h:"xDISC_xx"}
srv {haifu:"xDISC_xx;xDRAW_xx", }
 :   :
cli {h:"DECLF"}
srv {haifu:"xDECLF;xHAND_xxxxxx"}

case PHASE_PAYMENT:
cli {sb:"calc",p:"xx_xx_xx"}
srv {type:"approval",p:"xx_xx_xx"}
cli {sb:"approval",ans:true}

case PHASE_CONTINUE:
srv {type:"approval",next:"xx_xx"}
cli {sb:"approval",ans:true}



<9/4>


<9/3>
discard()の第一引数要る?
check_timeout()つくってみたけどとりあえず動作保留
スマホの画面設計いいなあ:卓表示320*320の下に確定ボタン320*160くらい
[今週予定]局遷移制御促進
現時点でDECLF_0が通った場合、鯖ではexpose_tiles()がコールされ、単一牌副露と同じ扱い.
Client側の表示はごまかしている。
和了者確定の場合、

srv:"%uHAND_{%02x}*13"の牌譜送付
cli:和了者の点数計算,{sb:pay, p:"52_13_26"}などを送付(供託含まず)
srv:点数を振り分けて全員に表示
cli:全員が承認を送付
(srv:連荘伺い)
(cli:全員が承認を送付)
srv:局遷移


<9/2>
結局
WIND_0
0PT_fa
0NAME_tomoki
的なことにする。

再掲

[クラス構成]
クラス：プレイヤ
プロパティ：識別ID/名前/風/点/手牌/副露牌/捨牌/フラグ(立直・一発・聴牌・振聴・鳴き待ち)/鳴き予約
メソッド：摸牌する/打牌する/立直する/鳴けるか判定する/鳴きを予約する/鳴きを実行する/牌譜に記録する

クラス：雀卓
プロパティ：山牌/手番/プレイヤ
メソッド：配牌する/手番を回す/同時鳴きを制御する/牌譜を読む/クライアントの入力を受け付ける

公開メソッド：ソケットハンドラ

課題：
雀卓にもプレイヤにも時間制限で駆動するメソッドがない。
基本クライアントdrivenな感じ
現行の構成だとsocket drivenかも。。
→ JongTable->timer() を追加する。socketから毎ループコールして時間切れなら強制進行
→ JongPlayer->bit_nakiとJongTable->turnで判定

<8/29>
・プレイヤ情報配布プロトコル
[0-3]INFO_$name_$pt_$is_me

>>メンバjp[]要求仕様
*摸打の順に並べる
*局遷移時はwindのみを変更する

要確認：
cli側では"0DEAL_xxxx"などの0は四風/インデクスのいずれを表すのか?

<8/27>
・デバッグ環境権等
あらかじめ動作中のJongTableインスタンスを画面表示するGUI

ログイン時の動作
srv 起動
srv testcase1.php.c
srv meibo, existing_player, jang_cond->jpをいじっておく
user ページ開(DEBUG用のクエリ)
srv-cli 接続開始open
cli 送付 { name:名前 type:debug id:DEBUG用}
srv 送付 { type:debug id:JongPlayer->token[4] }
cli 画面遷移
cli 送付 { id:ID type:history }
//srv 名簿参照 existing_playerまたはJP追加

srv haifu.datに溜める → やってた...

<8/26>
要修正：
・例のテスト項目のクリア 
・残り枚数バグ
要追加：
・デバッグ環境
・点数およびプレイヤ情報などのプロトコル追加(kashim要参照)
・局遷移
・時間制限
・クリック拡大
・点計算
・流局プロトコル:DRAW
・(点数・局遷移・)異議あり機能
・錯和(振聴栄・不聴立直)発声時はその場で和了放棄

・未確認 or 未実装：
副露中の立直(ができないこと) →済み
暗槓後の立直 →済み
立直中の暗槓 →常に可能,可否条件について調べてみるとこのように複雑過ぎるので保留
単一の大明槓、暗槓、加槓 →済み
自摸和了
振聴
同時発声
→全員スルーのときに無限ループが発生する
- 吃槓栄(東：2m3m持ち、南：1m1m1m持ち、西：2m3m持ちの両面聴牌、北：1m切り)
-栄のスルー
- 二家和/三家和
槍槓
→単一の栄は確認済み。ただし暗槓でも常に可能
栄スルーしたときにりんしゃんしないバグあり
槍槓の二家和・三家和
終巡制御

<8/24>
雀荘・ソケットのクラス化

[クラス構成]
クラス：プレイヤ
プロパティ：識別ID/名前/風/点/手牌/副露牌/捨牌/フラグ(立直・一発・聴牌・振聴・鳴き待ち)/鳴き予約
メソッド：摸牌する/打牌する/立直する/鳴けるか判定する/鳴きを予約する/鳴きを実行する/牌譜に記録する

クラス：雀卓
プロパティ：山牌/手番/プレイヤ
メソッド：配牌する/手番を回す/同時鳴きを制御する/牌譜を読む/クライアントの入力を受け付ける

クラス：ソケット
プロパティ：接続ソケット
メソッド：起動/送付/ハンドシェイク接続/メッセージ生成

クラス：雀荘
プロパティ：入室者/雀卓/ソケット
メソッド：面子の追加/面子の削除

<8/20>
ログイン時の動作
user ページ開
srv-cli 接続開始
user 名前入れ
cli 送付 { name:名前 type:login }
srv 名簿作成
srv 送付 { id:ID }
cli 接続断
cli 画面遷移
cli 送付 { id:ID type:history }
srv 名簿参照 existing_playerまたはJP追加


When the clientA sends:
{ sb: "init", h:"", size:0 }
the server returns to clientA by
{ haifu: "0DEAL_xxxxxx;1DEAL_xxxx..." }

When the clientA sends:
{ h:"", size:15 }
the server returns to clientA by
{ haifu: "0DEAL_xxxxx; ... ;3DRAW_xx" }

When the clientA sends:
{ h:"3DISC_xx", size:15 }
the server return to all by
{ haifu:"3DISC_xx" }
the server return to clientB by
{ haifu:"0DRAW_xx" }
the server return to clientA,C,D by
{ haifu:"0DRAW_00" }

CliA送 srv返toCliA toCliB toCliC toCliD 
初  配  配  配  配
    配  配  配  配
    配  配  配  配
    配  配  配  配
    摸x 摸0 摸0 摸0          
打  打  打  打  打
    摸0 摸x 摸0 摸0          
吃  吃  吃  吃  吃 

