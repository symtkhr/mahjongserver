<10/30>
クライアント側再設計
JSONでオブジェクトもらう?
投げるデータ: {class:"player"/"table", q:"関数名", arg:値}

<10/21-25>
タイマ実装完了
問題点:
*srv:終局制御(切れない,宣言できない)
*srv/cli:ラグ中のUI表示,#自摸和後のUI
*cli:画面表示・ソケット送付モジュールの要整理
*cli:聴牌から一向聴に戻したときに表示が解消されない


*srv:ログイン制御
*srv:流局制御：和了やめ, 箱割れ, 流し満貫*
*srv/cli:振聴*
*srv/cli:錯和の和了放棄* (役なし栄・振聴栄*・不聴立直*) → 鳴きフラグなどのスルー*
*cli:天和・地和・人和(*)
*srv:立直中の暗かん
*srv:ぽんちー直後のかん
*srv:二家和制御/頭跳ね
*srv:途中流局:九種九牌・四開かん・四風連打・四家立直 → 終了後は無勝負やり直し
*srv/cli:切断処理
*srv/cli:自摸切り,鳴きなし,ロンなし,自動和了
*srv:ルール選択:喰い替え,赤・花・透明, 2翻縛
*srv:借金立直

*srv:要確認>配牌聴牌で栄和可能か?#
*srv:うらどら・かんどら＃
*srv:自摸和のとき理牌しない＃
*srv:終巡制御＃(#立直できない, #聴牌料授受, #加暗かんできない, #鳴けないただしロンは可)
*srv:親和了後に局遷移しない場合がある＃
*srv:局遷移てすと：
	#1子栄和→東2-0へ/#2子自摸和→東2-0へ
	#3親栄和→東1-1へ/#4親自摸和→東1-1へ
	5不聴流局→東2-0へ/6聴牌流局→東2-0へ
*srv:流れ供託・通らば立直で振り込んだときの供託#

<10/14>
点数計算実装完了

<10/12>
クライアントの画面設計再構成
点数計算時の動作詳細
[和了の場合]
cli {h:"DECLF"}
srv {haifu:"xDECLF;xHAND_xxxxxx;DORA:xxxx;END"} // 単ロン時
srv {haifu:"xDECLF;xHAND_xxxxxx;haifu:"xDECLF;xHAND_xxxxxx;DORA:xxxx;END"}//Wロン時
cli_jq:和了形とどらを画面表示
cli {q:"calc",p:"xx_xx_xx"} 
// ENDがきたら自動で返す(jsで手役のみ計算。暫定措置)
srv {type:"approval",point: [p0_hand,p0_hon,p0_com,p1_hand..., p3_com], next:3_1 }
// 計算結果に本場と供託を加味する。Wロンの場合は別途考慮。
cli_jq 点計算・授受・次局を画面表示
cli {sb:"approval",ans:true}

[流局の場合のソケット部]
cli {h:"DISC_xx"}
srv {haifu:"xDISC_xx;xHAND_xxxxx;END"}
srv {type:"approval",point: [p0_hand,p0_hon(=0),p0_com,p1_hand..., p3_com], next:3_1 }
cli {sb:"approval",ans:true}

鯖からもらえる情報が少ないような気がしないでもない。

<10/3>
下記デバッグ完了。
ツモったときにq=Calcで全員マイナスされる。

<9/30>
テストパターンは東1局でのみ成功するものだったため、各局でやり直し。

<9/21>
サーバの局遷移実装完了。
クライアント側をテストする上でほしいもの。
サーバ可動途中でdebug_mode_s()に入れたり抜けたりできるやつ。

<9/11>
実装開始。

<9/10>
データ構造検討完了。
島版jspaceを参照しながら2時間程度悩む。

<9/8>
要整理: 以下の使分けと相互変換
$this->jpの配列index, 
$this->jp->wind, 
$this->turn 

<9/5>
srv_sockrecv_handler():
全体動作
case PHASE_INIT:
cli {sb: "init", }

case PHASE_GAME:
srv {wind:x, name:"xxxx", point:<int>, is_yourself:<bool>}
srv {haifu:"xDEAL_xxxx", }
cli {h:"xDISC_xx"}
srv {haifu:"xDISC_xx;xDRAW_xx", }
 :   :
cli {h:"DECLF"}
srv {haifu:"xDECLF;xHAND_xxxxxx"}

case PHASE_PAYMENT:
cli {sb:"calc",p:"xx_xx_xx"}
srv {type:"approval",p:"xx_xx_xx"}
cli {sb:"approval",ans:true}

case PHASE_CONTINUE:
srv {type:"approval",next:"xx_xx"}
cli {sb:"approval",ans:true}



<9/4>


<9/3>
discard()の第一引数要る?
check_timeout()つくってみたけどとりあえず動作保留
スマホの画面設計いいなあ:卓表示320*320の下に確定ボタン320*160くらい
[今週予定]局遷移制御促進
現時点でDECLF_0が通った場合、鯖ではexpose_tiles()がコールされ、単一牌副露と同じ扱い.
Client側の表示はごまかしている。
和了者確定の場合、

srv:"%uHAND_{%02x}*13"の牌譜送付
cli:和了者の点数計算,{sb:pay, p:"52_13_26"}などを送付(供託含まず)
srv:点数を振り分けて全員に表示
cli:全員が承認を送付
(srv:連荘伺い)
(cli:全員が承認を送付)
srv:局遷移


<9/2>
結局
WIND_0
0PT_fa
0NAME_tomoki
的なことにする。

再掲

[クラス構成]
クラス：プレイヤ
プロパティ：識別ID/名前/風/点/手牌/副露牌/捨牌/フラグ(立直・一発・聴牌・振聴・鳴き待ち)/鳴き予約
メソッド：摸牌する/打牌する/立直する/鳴けるか判定する/鳴きを予約する/鳴きを実行する/牌譜に記録する

クラス：雀卓
プロパティ：山牌/手番/プレイヤ
メソッド：配牌する/手番を回す/同時鳴きを制御する/牌譜を読む/クライアントの入力を受け付ける

公開メソッド：ソケットハンドラ

課題：
雀卓にもプレイヤにも時間制限で駆動するメソッドがない。
基本クライアントdrivenな感じ
現行の構成だとsocket drivenかも。。
→ JongTable->timer() を追加する。socketから毎ループコールして時間切れなら強制進行
→ JongPlayer->bit_nakiとJongTable->turnで判定

<8/29>
・プレイヤ情報配布プロトコル
[0-3]INFO_$name_$pt_$is_me

>>メンバjp[]要求仕様
*摸打の順に並べる
*局遷移時はwindのみを変更する

要確認：
cli側では"0DEAL_xxxx"などの0は四風/インデクスのいずれを表すのか?

<8/27>
・デバッグ環境権等
あらかじめ動作中のJongTableインスタンスを画面表示するGUI

ログイン時の動作
srv 起動
srv testcase1.php.c
srv meibo, existing_player, jang_cond->jpをいじっておく
user ページ開(DEBUG用のクエリ)
srv-cli 接続開始open
cli 送付 { name:名前 type:debug id:DEBUG用}
srv 送付 { type:debug id:JongPlayer->token[4] }
cli 画面遷移
cli 送付 { id:ID type:history }
//srv 名簿参照 existing_playerまたはJP追加

srv haifu.datに溜める → やってた...

<8/26>
要修正：
・例のテスト項目のクリア 
・残り枚数バグ
要追加：
・デバッグ環境
・点数およびプレイヤ情報などのプロトコル追加(kashim要参照)
・局遷移
・時間制限
・クリック拡大
・点計算
・流局プロトコル:DRAW
・(点数・局遷移・)異議あり機能
・錯和(振聴栄・不聴立直)発声時はその場で和了放棄

・未確認 or 未実装：
副露中の立直(ができないこと) →済み
暗槓後の立直 →済み
立直中の暗槓 →常に可能,可否条件について調べてみるとこのように複雑過ぎるので保留
単一の大明槓、暗槓、加槓 →済み
自摸和了
振聴
同時発声
→全員スルーのときに無限ループが発生する
- 吃槓栄(東：2m3m持ち、南：1m1m1m持ち、西：2m3m持ちの両面聴牌、北：1m切り)
-栄のスルー
- 二家和/三家和
槍槓
→単一の栄は確認済み。ただし暗槓でも常に可能
栄スルーしたときにりんしゃんしないバグあり
槍槓の二家和・三家和
終巡制御

<8/24>
雀荘・ソケットのクラス化

[クラス構成]
クラス：プレイヤ
プロパティ：識別ID/名前/風/点/手牌/副露牌/捨牌/フラグ(立直・一発・聴牌・振聴・鳴き待ち)/鳴き予約
メソッド：摸牌する/打牌する/立直する/鳴けるか判定する/鳴きを予約する/鳴きを実行する/牌譜に記録する

クラス：雀卓
プロパティ：山牌/手番/プレイヤ
メソッド：配牌する/手番を回す/同時鳴きを制御する/牌譜を読む/クライアントの入力を受け付ける

クラス：ソケット
プロパティ：接続ソケット
メソッド：起動/送付/ハンドシェイク接続/メッセージ生成

クラス：雀荘
プロパティ：入室者/雀卓/ソケット
メソッド：面子の追加/面子の削除

<8/20>
ログイン時の動作
user ページ開
srv-cli 接続開始
user 名前入れ
cli 送付 { name:名前 type:login }
srv 名簿作成
srv 送付 { id:ID }
cli 接続断
cli 画面遷移
cli 送付 { id:ID type:history }
srv 名簿参照 existing_playerまたはJP追加


When the clientA sends:
{ sb: "init", h:"", size:0 }
the server returns to clientA by
{ haifu: "0DEAL_xxxxxx;1DEAL_xxxx..." }

When the clientA sends:
{ h:"", size:15 }
the server returns to clientA by
{ haifu: "0DEAL_xxxxx; ... ;3DRAW_xx" }

When the clientA sends:
{ h:"3DISC_xx", size:15 }
the server return to all by
{ haifu:"3DISC_xx" }
the server return to clientB by
{ haifu:"0DRAW_xx" }
the server return to clientA,C,D by
{ haifu:"0DRAW_00" }

CliA送 srv返toCliA toCliB toCliC toCliD 
初  配  配  配  配
    配  配  配  配
    配  配  配  配
    配  配  配  配
    摸x 摸0 摸0 摸0          
打  打  打  打  打
    摸0 摸x 摸0 摸0          
吃  吃  吃  吃  吃 

