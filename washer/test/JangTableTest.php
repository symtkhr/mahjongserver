<?php
//require_once 'PHPUnit/Framework.php';
require_once '../gitJunkSpace/JongTable.php';
require_once '../gitJunkSpace/JangPlayer.php';
require_once '../gitJunkSpace/JongCommon.php';

/**
 * Test class for Hello.
 * Generated by PHPUnit on 2010-03-29 at 03:14:15.
 */
class HelloTest extends PHPUnit_Framework_TestCase
{
  /**
   * @var Hello
   */
  protected $object;
  var $haifu_precondiftion;
  
  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp()
  {
    $this->object = new JongTable;
    $jang_cond =& $this->object;
    $jang_cond->init_members();
    $jang_cond->aspect = 0;
    $jang_cond->jp_size = 4;
    $bandaid_name = array("SpringFire","SummerWater","AutumnWind","WinterEarth");
    $bandaid_pt = array(0, 0, 0, 0);
    for ($i = 0; $i < 4; $i++){
      $jang_cond->jp[$i] = new JangPlayer;
      $jang_cond->jp[$i]->name = $bandaid_name[$i];
      $jang_cond->jp[$i]->token = rand(0, 0xffff);
      $jang_cond->jp[$i]->pt = $bandaid_pt[$i];
    }
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown()
  {
  }
  
  /**
   * @todo Implement testGetMessage().
   */
  // テストケース: 複合鳴きフラグ (二家和)
  public function test_check_2chahuo()
  {
    $this->haifu_precondition = 
      array(
	    "0DEAL_0c121426333e454d4f506b6f88",
	    "1DEAL_0407133b4a5460626471747d7f",
	    "2DEAL_1632383a3f4046525c5d697284",
	    "3DEAL_05222d2e3547515658797a8087",
	    "xDORA_57",

	    "0DRAW_0d",
	    "0DISC_88",
	    "1DRAW_82",
	    "1DISC_04",
	    "2DRAW_63",
	    "2DISC_84",
	    "3DRAW_17",
	    "3DISC_47",
	    "0DRAW_0a",
	    "0DISC_6f",
	    "1DRAW_55",
	    "1DISC_07",
	    "2DRAW_75",
	    "2DISC_75",
	    "3DRAW_39",
	    "3DISC_80",

	    "0DRAW_06",
	    "0DISC_6b",
	    "1DRAW_81",
	    "1DISC_13",
	    "0DECLP_1412",
	    "0DISC_26",
	    "1DRAW_7c",
	    "1DISC_7c",
	    "3DECLP_797a",
	    "3DISC_87",
	    "0DRAW_67",
	    "0DISC_67",
	    "1DRAW_70",
	    "1DISC_3b",
	    "2DRAW_73",
	    "2DISC_69",
	    "3DRAW_85",
	    "3DISC_85",
	    "0DRAW_34",
	    "0DISC_3e",
	    "1DRAW_59",
	    "1DISC_4a",
	    "2DRAW_41",
	    "2DISC_32",
	    "0DECLP_3334",
	    "0DISC_0d",
	    "1DRAW_7e",
	    "1DISC_70",
	    "2DRAW_1b",
	    "2DISCR_52",
	    "3DRAW_0f",
	    "3DISC_22",
	    "0DRAW_4e",
	    "0DECLK_4e",
	    "xDORA_03",
	    "0DRAW_36",
	    "0DISC_06",
	    "1DRAW_23",
	    "1DISC_23",
	    //      "2DRAW_13",

	    "2DRAW_7b",
	    "2DISC_7b",
	    "3DRAW_3d",
	    "3DISC_58",
	    "0DRAW_53",
	    "0DISC_53",
	    "1DRAW_2a",
	    "1DISC_2a",
	    "2DRAW_5a",
	    "2DISC_5a",
	    "3DECLC_5156",
	    "3DISC_05",
	    "0DRAW_31",
	    //*
	    "0DECLK_31",

	    "0DRAW_0b",
	    "0DISC_45",
	    "xDORA_6e",
	    "1DRAW_1c",
	    "1DISC_1c",
	    "2DRAW_09",
	    "2DISC_09",

	    "0DECLK_0c",
	    "0DRAW_21",
	    //"0DRAW_".sprintf("%02x", (5+9)*4-1),
	    //*
	    "0DISC_36",
	    "xDORA_28",
	    "1DRAW_68",
	    "1DISC_64",
	    "2DRAW_61",
	    "2DISC_61",
	    "3DRAW_78",
	    "3DISC_78",
	    "0DRAW_11",
	    "0DECLK_11",
	    //"0DRAW_24"
	    /**/	       );
 
    $this->eval_testcase(array("2DECL0_0", "3DECL0_0"), "0DRAW"); //→ 0DRAW_嶺上
    $this->eval_testcase(array("2DECLF_0", "3DECL0_0"), "2DECLF");//→ 栄2
    $this->eval_testcase(array("2DECL0_0", "3DECLF_0"), "3DECLF");//→ 栄3
    $this->eval_testcase(array("2DECLF_0", "3DECLF_0"), "2DECLF");//→ 栄2・栄3
    $this->eval_testcase(array("3DECL0_0", "2DECL0_0"), "0DRAW"); //→ 0DRAW_嶺上
    $this->eval_testcase(array("3DECLF_0", "2DECL0_0"), "3DECLF");//→ 栄3
    $this->eval_testcase(array("3DECL0_0", "2DECLF_0"), "2DECLF");//→ 栄2
    $this->eval_testcase(array("3DECLF_0", "2DECLF_0"), "2DECLF");//→ 栄2・栄3
  }


  // テストケース: 複合鳴きフラグ (栄槓吃)
  public function test_check_simu_naki()
  {
    $this->haifu_precondition = 
      array(
	    "0DEAL_060b0a10111226303a444d4f58",
	    "1DEAL_010203131c1e24292c3c3d3e4c",
	    "2DEAL_080c3132333f41475d62687273",
	    //"2DEAL_080c0d3132333f41475d62687a",
	    "3DEAL_0407152d2e3539454e50566a6f",
	    "0DRAW_34",
	    "0DISC_26",
	    "1DRAW_5e",
	    "1DISC_4c",
	    //"2DRAW_0d",
	    "2DRAW_19",
	    "2DISC_19",
	    "3DRAW_5b",
	    "3DISC_04",
	    );
    
    $this->eval_testcase(array("0DECLC_060a", "1DECLK_01", "2DECLF_0"), "2DECLF");//→ 栄
    $this->eval_testcase(array("1DECLK_01", "0DECLC_060a", "2DECLF_0"), "2DECLF");//→ 栄
    $this->eval_testcase(array("0DECL0_0", "1DECLK_01", "2DECLF_0"),    "2DECLF");//→ 栄
    $this->eval_testcase(array("1DECLK_01", "0DECL0_0", "2DECLF_0"),    "2DECLF");//→ 栄
    $this->eval_testcase(array("1DECLK_01", "2DECLF_0"),                "2DECLF");//→ 栄
    $this->eval_testcase(array("0DECLC_060a", "1DECL0_0", "2DECLF_0"),  "2DECLF");//→ 栄
    $this->eval_testcase(array("1DECL0_0", "0DECLC_060a", "2DECLF_0"),  "2DECLF");//→ 栄
    $this->eval_testcase(array("0DECL0_0", "1DECL0_0", "2DECLF_0"),     "2DECLF");//→ 栄
    $this->eval_testcase(array("1DECL0_0", "0DECL0_0", "2DECLF_0"),     "2DECLF");//→ 栄
    $this->eval_testcase(array("1DECL0_0", "2DECLF_0"),                 "2DECLF");//→ 栄
    $this->eval_testcase(array("0DECLC_060a", "2DECLF_0"),              "2DECLF");//→ 栄
    $this->eval_testcase(array("0DECL0_0", "2DECLF_0"      ),           "2DECLF");//→ 栄
    $this->eval_testcase(array("2DECLF_0"            ),                 "2DECLF");//→ 栄
    $this->eval_testcase(array("0DECLC_060a", "1DECLK_01", "2DECL0_0"), "1DECLK");//→ 槓
    $this->eval_testcase(array("0DECLC_060a", "2DECL0_0", "1DECLK_01"), "1DECLK");//→ 槓
    $this->eval_testcase(array("1DECLK_01", "0DECLC_060a", "2DECL0_0"), "1DECLK");//→ 槓
    $this->eval_testcase(array("1DECLK_01", "2DECL0_0"),                "1DECLK");//→ 槓
    $this->eval_testcase(array("2DECL0_0", "0DECLC_060a", "1DECLK_01"), "1DECLK");//→ 槓
    $this->eval_testcase(array("0DECL0_0", "1DECLK_01", "2DECL0_0"),    "1DECLK");//→ 槓
    $this->eval_testcase(array("0DECL0_0", "2DECL0_0", "1DECLK_01"),    "1DECLK");//→ 槓
    $this->eval_testcase(array("1DECLK_01", "0DECL0_0", "2DECL0_0"),    "1DECLK");//→ 槓
    $this->eval_testcase(array("2DECL0_0", "0DECL0_0", "1DECLK_01"),    "1DECLK");//→ 槓
    $this->eval_testcase(array("2DECL0_0", "1DECLK_01"      ),          "1DECLK");//→ 槓
    $this->eval_testcase(array("0DECLC_060a", "1DECL0_0", "2DECL0_0"), "0DECLC"); //→ 吃
    $this->eval_testcase(array("0DECLC_060a", "2DECL0_0", "1DECL0_0"), "0DECLC"); //→ 吃
    $this->eval_testcase(array("1DECL0_0", "0DECLC_060a", "2DECL0_0"), "0DECLC"); //→ 吃
    $this->eval_testcase(array("1DECL0_0", "2DECL0_0", "0DECLC_060a"), "0DECLC"); //→ 吃
    $this->eval_testcase(array("2DECL0_0", "0DECLC_060a", "1DECL0_0"), "0DECLC"); //→ 吃
    $this->eval_testcase(array("2DECL0_0", "1DECL0_0", "0DECLC_060a"), "0DECLC"); //→ 吃
    $this->eval_testcase(array("0DECL0_0", "1DECL0_0", "2DECL0_0"), "0DRAW"); //→ (次巡)
    $this->eval_testcase(array("0DECL0_0", "2DECL0_0", "1DECL0_0"), "0DRAW"); //→ (次巡)
    $this->eval_testcase(array("1DECL0_0", "0DECL0_0", "2DECL0_0"), "0DRAW"); //→ (次巡)
    $this->eval_testcase(array("1DECL0_0", "2DECL0_0", "0DECL0_0"), "0DRAW"); //→ (次巡)
    $this->eval_testcase(array("2DECL0_0", "0DECL0_0", "1DECL0_0"), "0DRAW"); //→ (次巡)
    $this->eval_testcase(array("2DECL0_0", "1DECL0_0", "0DECL0_0"), "0DRAW"); //→ (次巡)

  }

  function eval_testcase($cmds, $expected_result) 
  {
    $jang_cond =& $this->object;
    $last_haifu = end($this->haifu_precondition);
    $jang_cond->is_unittest = true;
    $jang_cond->init_aspects();
    $haifu_concat = array_merge($this->haifu_precondition, array("TEST"), $cmds);
    $this->load_haifu_s($haifu_concat);
    if (count($cmds) == 0) continue;
    //printf("%02d: ", $i + 1);
    $n = array_search($last_haifu, $jang_cond->haifu);
    $result_haifu = array_shift(explode("_", $jang_cond->haifu[$n + 1]));
    if(0) {
      echo $result_haifu . "\t<-\t";
      echo implode(" / ", $cmds);
      echo "\n";
    }
    $this->assertEquals($result_haifu, $expected_result);
    
  }

  function load_haifu_s($haifu, $is_shown = false) {
    $jang_cond = &$this->object;
    $jp =& $jang_cond->jp;
    $is_test = false;
    
    foreach($haifu as $step){
      $reg = preg_match("/^([0-3x])(D[A-Z]+)_([0-9a-f]+)$/", trim($step), $ref);
      if($reg != 1) continue;
      
      $op = $ref[2];
      $target = $ref[3];
      
      switch($op){
      case "DEAL":
      case "DRAW":
      case "DECK":
	for($i = 0; $i < strlen($target); $i += 2)
	  array_push($jang_cond->yamahai, hexdec(substr($target, $i, 2)));
      break;
      case "DORA":
	array_push($jang_cond->wangpai, hexdec($target));
	break;
      }
    }
    
    $testarray = array_merge($jang_cond->yamahai, $jang_cond->wangpai);
    sort($testarray);
    array_push($testarray, 137);
    $pre_id = 0;
    foreach($testarray as $id) {
      //echo ($pre_id + 1 ) . "to". $id."\n";
      for($i = $pre_id + 1; $i < $id; $i++) {
	if($i <= 136) array_push($jang_cond->yamahai, $i);
      }
      $pre_id = $id;
    }
    if(count($jang_cond->yamahai) + count($jang_cond->wangpai) != 136) {
      sort($jang_cond->yamahai);
      print_r($jang_cond->yamahai);
      exit("Invalid haifu\n");
    }

    for($i = count($jang_cond->wangpai); $i < 14; $i++) {
      array_push($jang_cond->wangpai, 
		 array_pop($jang_cond->yamahai));
    }
    
    $jang_cond->deal_tiles(true);
    
    foreach($haifu as $i_st => $step){
      if($step==="TEST") $is_test = true;
      $reg = preg_match("/^([0-3x])(D[A-Z0]+)_([0-9a-f]+)$/",trim($step),$ref);
      if($reg != 1) continue;
      
      $wind = $ref[1] * 1;
      $playerIndex = ($wind + $jang_cond->aspect) % 4;
      $op = $ref[2];
      $target = $ref[3];
      
      switch($op){
      case "DRAW":
	for($i = 0; $i < 4; $i++) 
	  if($jp[$i]->bit_naki > 0 && !$is_test)
	    $jang_cond->eval_command($jp[$i]->wind . "DECL0_0", $i);
	break;
      case "DECLC":
      case "DECLP":
      case "DECLK":
      case "DECLF":
	for($i = 0; $i < 4; $i++) 
	  if($i != $playerIndex && $jp[$i]->bit_naki > 0 && !$is_test)
	    $jang_cond->eval_command($jp[$i]->wind . "DECL0_0", $i);
      /* through */
      case "DISC":
      case "DISCR":
      case "DECL0":
	$jang_cond->eval_command($step, $playerIndex);
      break;
      case "DEAL":
      case "DECK":
      default:
	break;
      }
    }
  }

  function test_add_player() {
    $this->object = new JongTable;
    $jang_cond =& $this->object;
    for($i = 0; $i < 4; $i++)
    $jang_cond->add_player("tester01", 12345);
    $this->assertEquals($jang_cond->jp_size, 1);
    $jang_cond->add_player("tester02", 13579);
    $this->assertEquals($jang_cond->jp_size, 2);

    $names = array();
    foreach($jang_cond->jp as $jp) 
      array_push($names, $jp->token);
    var_dump($names);
    $this->assertContains(12345, $names);
  }
}
?>
